name: Publish app

on:
    workflow_dispatch:

env:
    WTOOLS_AEAD_KEY: ${{ secrets.WTOOLS_AEAD_KEY }}
    WTOOLS_SECRET: ${{ secrets.WTOOLS_SECRET }}
    TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
    REMOTE_HOST: ${{ secrets.SERVER_IP }}
    REMOTE_USER: ${{ secrets.USERNAME }}
    SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
    mw-toolbox:
        strategy:
            fail-fast: false
            matrix:
                platform: [macos-latest, ubuntu-latest, windows-latest]

        runs-on: ${{ matrix.platform }}

        steps:
            - uses: actions/checkout@v2

            - name: Prepare folders on update server
              if: runner.os == 'Linux'
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ env.REMOTE_HOST }}
                  username: ${{ env.REMOTE_USER }}
                  key: ${{ env.SSH_PRIVATE_KEY }}
                  script: |
                      cd ~/wwwcdn/releases/mw-toolbox/
                      rm -rf previous/
                      mv latest/ previous
                      mkdir -p latest/win64 latest/linux latest/darwin

            - name: Setup rust
              uses: hecrj/setup-rust-action@v1

            - name: Setup node
              uses: actions/setup-node@v1
              with:
                  node-version: '16'

            - name: Install dependencies (ubuntu only)
              if: runner.os == 'Linux'
              run: |
                  sudo apt update
                  sudo apt install -y libwebkit2gtk-4.0-dev

            # No need for rust cache for release build as it gets cleared every week
            - name: Create cache for pnpm modules
              uses: actions/cache@v2
              env:
                  cache-name: cache-pnpm-modules
              with:
                  path: ~/.pnpm-store
                  key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-
                      ${{ runner.os }}-build-${{ env.cache-name }}-

            - name: Install pnpm and project dependencies
              uses: pnpm/action-setup@v2
              with:
                  version: 6.x.x
                  run_install: |
                      - cwd: gui

            - name: Build app
              run: |
                  cd gui
                  pnpm tauri build

            - name: Upload files to the update server (Windows)
              if: runner.os == 'Windows'
              uses: easingthemes/ssh-deploy@main
              with:
                  SOURCE: 'target/release/bundle/msi/'
                  TARGET: '~/wwwcdn/releases/mw-toolbox/latest/win64/'

            - name: Upload files to the update server (Linux)
              if: runner.os == 'Linux'
              uses: easingthemes/ssh-deploy@main
              with:
                  SOURCE: 'target/release/bundle/appimage/'
                  TARGET: '~/wwwcdn/releases/mw-toolbox/latest/linux/'

            - name: Upload files to the update server (macOS)
              if: runner.os == 'macOS'
              uses: easingthemes/ssh-deploy@main
              with:
                  SOURCE: 'target/release/bundle/macos/'
                  TARGET: '~/wwwcdn/releases/mw-toolbox/latest/darwin/'

            - name: Get release version
              uses: nyaa8/package-version@v1
              with:
                  path: 'gui/package.json'

            - name: Tag commit
              uses: tvdias/github-tagger@v0.0.1
              with:
                  repo-token: ${{ secrets.GITHUB_TOKEN }}
                  tag: 'v${{ env.PACKAGE_VERSION }}'

            - name: Create release
              uses: ncipollo/release-action@v1
              with:
                  allowUpdates: true
                  artifacts: 'target/release/bundle/msi/*,target/release/bundle/appimage/*,target/release/bundle/macos/*,'
                  body: 'See the assets to download this version and install.'
                  tag: 'v${{ env.PACKAGE_VERSION }}'
                  token: ${{ secrets.GITHUB_TOKEN }}
